# 📋 PROCESSAR LISTA DE TAREFAS - DIRETRIZES

## 🎯 OBJETIVO
Processar uma lista de tarefas de forma sistemática, uma sub-tarefa por vez, aguardando permissão entre sub-tarefas.

## 📝 PROTOCOLO DE EXECUÇÃO

### FASE 1: APRESENTAÇÃO DAS TAREFAS PAI
1. **Apresente as tarefas de alto nível** (cerca de 5 tarefas principais)
2. **Aguarde confirmação** do usuário com "Vai" ou similar
3. **NÃO prossiga** até receber a confirmação

### FASE 2: PROCESSAMENTO DAS SUB-TAREFAS
1. **Uma sub-tarefa por vez** - NUNCA processe múltiplas simultaneamente
2. **Aguarde permissão** entre cada sub-tarefa
3. **Marque como concluída** `[x]` quando finalizar cada sub-tarefa

### FASE 3: PROTOCOLO DE CONCLUSÃO
Quando todas as sub-tarefas de uma tarefa pai estiverem `[x]`:

#### ✅ CHECKLIST OBRIGATÓRIO DE FINALIZAÇÃO:
1. **📝 COMMIT DAS MUDANÇAS**
   ```bash
   git add .
   git commit -m "feat: [descrição específica da funcionalidade implementada]"
   ```

2. **🚀 PUSH PARA REPOSITÓRIO**
   ```bash
   git push
   ```

3. **📋 PULL REQUEST** (quando aplicável)
   - Criar PR com descrição detalhada da implementação
   - Vincular à funcionalidade no Notion

4. **🔄 ATUALIZAR STATUS NO NOTION**
   - Marcar funcionalidade como "Concluída" ou "Pronto para Teste"
   - Adicionar comentário com detalhes da implementação
   - Incluir link do commit/PR

5. **📊 RELATÓRIO EM RESULTS/**
   - Gerar arquivo de relatório com:
     - Funcionalidade implementada
     - Solução desenvolvida
     - Arquivos modificados
     - Link do commit/PR

6. **🧹 LIMPEZA**
   - Remover arquivos temporários
   - Atualizar lista de tarefas
   - Marcar tarefa pai como `[x]`

## 🔄 ATUALIZAÇÃO DA LISTA DE TAREFAS
- **Mantenha "Arquivos Relevantes"** sempre atualizado
- **Adicione novos arquivos** conforme são criados/modificados
- **Remova arquivos** que não são mais necessários

## ⚠️ REGRAS IMPORTANTES
- **NUNCA** processe múltiplas sub-tarefas simultaneamente
- **SEMPRE** aguarde permissão entre sub-tarefas
- **SEMPRE** execute o protocolo de finalização completo
- **SEMPRE** mantenha a lista de tarefas atualizada
- **NUNCA** pule etapas do protocolo de finalização

## 🎯 EXEMPLO DE FLUXO
```
1. Apresentar tarefas pai → Aguardar "Vai"
2. Sub-tarefa 1 → Aguardar permissão → Executar → Marcar [x]
3. Sub-tarefa 2 → Aguardar permissão → Executar → Marcar [x]
4. Sub-tarefa 3 → Aguardar permissão → Executar → Marcar [x]
5. Todas sub-tarefas [x] → Executar protocolo de finalização
6. Marcar tarefa pai [x] → Próxima tarefa pai
```

## 🚨 PROTOCOLO ESPECIAL PARA BUGS REPROVADOS

### DETECÇÃO DE BUG REPROVADO
Quando um bug tem status "Reprovado" ou "Rejeitado":

1. **ANÁLISE DETALHADA DA REPROVAÇÃO**
   - Ler comentários de reprovação no Notion
   - Identificar motivos específicos da reprovação
   - Analisar feedback do revisor/testador
   - Documentar lições aprendidas

2. **NOVA ABORDAGEM ESTRATÉGICA**
   - **Abordagem 1**: Análise mais profunda do problema raiz
   - **Abordagem 2**: Refatoração completa da solução anterior
   - **Abordagem 3**: Implementação de solução alternativa
   - **Abordagem 4**: Consulta com especialistas/arquitetura

3. **METODOLOGIA DIFERENCIADA**
   - **Fase 1**: Investigação forense do código
   - **Fase 2**: Análise de impacto e dependências
   - **Fase 3**: Design de solução robusta
   - **Fase 4**: Implementação com validação rigorosa
   - **Fase 5**: Testes abrangentes e documentação

4. **PROTOCOLO DE VALIDAÇÃO RIGOROSA**
   - Testes unitários obrigatórios
   - Testes de integração
   - Validação manual detalhada
   - Revisão de código por pares
   - Documentação completa da solução

5. **COMUNICAÇÃO TRANSPARENTE**
   - Comentário detalhado no Notion explicando nova abordagem
   - Justificativa técnica da solução
   - Plano de testes e validação
   - Cronograma de implementação

### TEMPLATE PARA BUGS REPROVADOS
```
## 🔄 BUG REPROVADO - NOVA ABORDAGEM

**Bug ID**: [ID]
**Motivo da Reprovação**: [detalhes]
**Nova Estratégia**: [abordagem escolhida]

### 📋 PLANO DE AÇÃO
1. **Investigação**: [o que será investigado]
2. **Análise**: [como será analisado]
3. **Solução**: [nova solução proposta]
4. **Validação**: [como será validado]
5. **Testes**: [testes que serão executados]

### ⚠️ PONTOS DE ATENÇÃO
- [lista de pontos críticos]
- [riscos identificados]
- [dependências]

### 📅 CRONOGRAMA
- [timeline detalhado]
```

## 🎯 OBJETIVO FINAL
Garantir que cada tarefa seja executada com qualidade máxima, seguindo o protocolo rigoroso e mantendo transparência total no processo, especialmente para bugs que foram reprovados anteriormente.