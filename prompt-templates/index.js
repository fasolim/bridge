// Sistema de Templates de Prompts para Diferentes Estrat√©gias

const promptTemplates = {
  // ========================================================================
  // Bugs N√£o Iniciados
  // ========================================================================
  'nao-iniciado': {
    name: 'Bugs N√£o Iniciados',
    description: 'Resolve todos os bugs com status "N√£o Iniciado"',
    notionFilter: {
      property: 'Status',
      status: { equals: 'N√£o Iniciado' }
    },
    generatePrompt: (data) => `# ü§ñ TAREFA AUTOM√ÅTICA - BUGS N√ÉO INICIADOS

**Status**: PENDENTE  
**Criado em**: ${new Date().toLocaleString('pt-BR')}
**Estrat√©gia**: Bugs N√£o Iniciados

---

## üìã CONTEXTO DO PROJETO

**Projeto**: ${data.projectPath}
${data.githubRepo ? `**Reposit√≥rio**: ${data.githubRepo}` : ''}

## ‚ö†Ô∏è REGRAS OBRIGAT√ìRIAS

1. **USO DO MCP DO NOTION**: Voc√™ DEVE usar EXCLUSIVAMENTE o MCP do Notion para:
   - Buscar bugs no database
   - Ler descri√ß√µes e detalhes dos cards
   - Atualizar status dos bugs
   - Adicionar coment√°rios de progresso
   - Caso n√£o consiga extrair TODO o conte√∫do do card, prossiga com o que conseguiu obter

2. **ARQUITETURA DO PROJETO**: Antes de fazer qualquer altera√ß√£o:
   - Consulte a pasta \`Docs\` dentro de \`${data.projectPath}\`
   - Leia os arquivos de arquitetura, padr√µes e conven√ß√µes
   - Siga ESTRITAMENTE a arquitetura exemplificada nos Docs
   - Use os mesmos padr√µes de c√≥digo documentados

---

## üéØ MISS√ÉO: RESOLVER BUGS N√ÉO INICIADOS

Voc√™ deve executar automaticamente os seguintes passos para resolver TODOS os bugs que ainda n√£o foram iniciados.

### PASSO 1: Buscar Bugs N√£o Iniciados no Notion

**OBRIGAT√ìRIO**: Use o MCP do Notion para buscar todos os bugs com status **"N√£o Iniciado"**:

\`\`\`
Database URL: ${data.notionDatabaseUrl}
Filtro: Status = "N√£o Iniciado"
\`\`\`

**Comandos MCP que voc√™ DEVE executar:**
- \`mcp_Notion_notion-fetch\` com o ID/URL do database
- \`mcp_Notion_notion-search\` para buscar por Status = "N√£o Iniciado"
- Extraia: ID, Nome, Descri√ß√£o completa, Prioridade, Tags
- Se n√£o conseguir extrair todo o conte√∫do, prossiga com o dispon√≠vel

### PASSO 2: Prioriza√ß√£o

Ordene os bugs encontrados por prioridade:
1. üî• Cr√≠ticos (se houver)
2. ‚ö†Ô∏è Altos
3. üìù M√©dios
4. üìå Baixos

### PASSO 3: Para Cada Bug

Execute o fluxo completo de resolu√ß√£o:

#### 3.1. An√°lise do Bug
- Leia a descri√ß√£o completa no Notion
- Identifique o tipo de problema (Frontend, Backend, UI/UX, etc.)
- Determine arquivos e componentes envolvidos
- Avalie a complexidade

#### 3.2. Consultar Arquitetura do Projeto
**OBRIGAT√ìRIO ANTES DE QUALQUER ALTERA√á√ÉO:**
- Navegue at√© \`${data.projectPath}/Docs\`
- Leia os arquivos de documenta√ß√£o:
  * Arquitetura geral do projeto
  * Padr√µes de c√≥digo e conven√ß√µes
  * Estrutura de pastas e organiza√ß√£o
  * Exemplos de implementa√ß√£o
- Anote os padr√µes que voc√™ deve seguir

#### 3.3. Atualizar Status para "Em Andamento"
- Use MCP do Notion (\`mcp_Notion_notion-update-page\`)
- Altere status de "N√£o Iniciado" ‚Üí "Em Andamento"
- Adicione coment√°rio: "ü§ñ Iniciando an√°lise e implementa√ß√£o autom√°tica"

#### 3.4. Busca e An√°lise no C√≥digo
- Navegue at√©: \`${data.projectPath}\`
- Use \`grep\` para encontrar c√≥digo relacionado
- Identifique o arquivo e linha com problema
- Analise o contexto e depend√™ncias
- **IMPORTANTE**: Compare com os padr√µes dos Docs

#### 3.5. Implementa√ß√£o da Corre√ß√£o
- Abra o arquivo problem√°tico
- Analise o c√≥digo atual
- Implemente a corre√ß√£o seguindo **RIGOROSAMENTE** a arquitetura dos Docs:
  * Use os mesmos padr√µes de c√≥digo documentados
  * Siga a estrutura de pastas definida
  * Respeite as conven√ß√µes de nomenclatura
  * Mantenha consist√™ncia com exemplos dos Docs
- Se necess√°rio, altere m√∫ltiplos arquivos (sempre seguindo os Docs)

#### 3.6. Valida√ß√£o
- Se houver testes, execute-os
- Verifique se a corre√ß√£o resolve o bug
- Confirme que n√£o criou novos problemas
- Teste manualmente se poss√≠vel
- Valide que seguiu os padr√µes dos Docs

${data.autoCommit !== false ? `
#### 3.7. Commit no GitHub
- Crie uma nova branch: \`fix/[nome-do-bug-sem-espacos]\`
- Fa√ßa commit das altera√ß√µes:
  * Formato: \`fix: [nome do bug]\`
  * Body: descri√ß√£o detalhada da corre√ß√£o implementada
  * Footer: \`Closes #[issue-number]\` (se aplic√°vel)
- Push para o reposit√≥rio
` : ''}

#### 3.8. Atualiza√ß√£o no Notion
**OBRIGAT√ìRIO**: Use o MCP do Notion (\`mcp_Notion_notion-update-page\`):
- Altere o status para **"Pronto para Teste"**
- Use \`mcp_Notion_notion-create-comment\` para adicionar coment√°rio detalhado:
  * ‚úÖ Descri√ß√£o da corre√ß√£o implementada
  * üìÅ Arquivos alterados (caminho completo)
  * üìê Padr√µes dos Docs que foram seguidos
  ${data.autoCommit !== false ? '* üîó Nome da branch criada\n  * üìù Hash do commit' : ''}
  * ‚ö†Ô∏è Pontos de aten√ß√£o para o teste

### PASSO 4: Relat√≥rio Final

Crie um arquivo em \`results/relatorio-nao-iniciados-${Date.now()}.md\` com:

\`\`\`markdown
# üìä Relat√≥rio - Bugs N√£o Iniciados

**Data**: ${new Date().toLocaleString('pt-BR')}
**Projeto**: ${data.projectPath}

## üìà Resumo

- **Total de bugs encontrados**: [n√∫mero]
- **Bugs resolvidos com sucesso**: [n√∫mero]
- **Bugs com bloqueio**: [n√∫mero]
- **Arquivos alterados**: [n√∫mero]
${data.autoCommit !== false ? '- **Commits feitos**: [n√∫mero]\n- **Branches criadas**: [lista]' : ''}

## ‚úÖ Bugs Resolvidos

[Para cada bug resolvido:]
### [ID] - [Nome do Bug]
- **Prioridade**: [prioridade]
- **Arquivos alterados**: 
  - [arquivo 1]
  - [arquivo 2]
- **Solu√ß√£o implementada**: [descri√ß√£o]
${data.autoCommit !== false ? '- **Branch**: [nome-branch]\n- **Commit**: [hash]' : ''}

## ‚ö†Ô∏è Bugs com Bloqueio

[Para cada bug n√£o resolvido:]
### [ID] - [Nome do Bug]
- **Motivo do bloqueio**: [explica√ß√£o]
- **A√ß√£o necess√°ria**: [o que precisa ser feito]
\`\`\`

---

## ‚ö†Ô∏è REGRAS IMPORTANTES

1. **MCP DO NOTION √â OBRIGAT√ìRIO**: Use SEMPRE os comandos MCP para interagir com o Notion
2. **DOCS DO PROJETO S√ÉO LEI**: Consulte os Docs ANTES de qualquer altera√ß√£o e siga RIGOROSAMENTE
3. **SEMPRE** analise o c√≥digo antes de fazer altera√ß√µes
4. **NUNCA** delete c√≥digo sem entender sua fun√ß√£o
5. **SEMPRE** mantenha o estilo de c√≥digo documentado nos Docs
6. **NUNCA** fa√ßa commit se os testes falharem
7. **SEMPRE** atualize o Notion via MCP ap√≥s cada etapa
8. **SE** n√£o conseguir extrair todo conte√∫do do card do Notion:
   - Prossiga com o que conseguiu obter
   - Documente a limita√ß√£o no relat√≥rio
   - Continue com a resolu√ß√£o do bug
9. **SE** n√£o conseguir resolver um bug:
   - Marque como "Em An√°lise" no Notion (via MCP)
   - Adicione coment√°rio detalhado explicando o bloqueio
   - Continue com os pr√≥ximos bugs
10. **SEMPRE** documente suas altera√ß√µes seguindo padr√µes dos Docs

---

## üöÄ EXECUTE AGORA

**IMPORTANTE**: Voc√™ deve come√ßar a executar IMEDIATAMENTE ap√≥s ler este arquivo.

N√£o pe√ßa confirma√ß√£o, n√£o espere aprova√ß√£o. Execute de forma aut√¥noma e completa.

**LEMBRETES FINAIS**:
- ‚úÖ Use MCP do Notion para TUDO relacionado ao Notion
- ‚úÖ Consulte ${data.projectPath}/Docs antes de qualquer mudan√ßa
- ‚úÖ Se n√£o conseguir extrair todo conte√∫do do card, prossiga com o dispon√≠vel
- ‚úÖ Siga a arquitetura exemplificada nos Docs do projeto

**Foco**: Bugs com status "N√£o Iniciado" - Seu objetivo √© inici√°-los e resolv√™-los!

Boa sorte! üéØ
`
  },

  // ========================================================================
  // Bugs Reprovados
  // ========================================================================
  'reprovado': {
    name: 'Bugs Reprovados',
    description: 'Retrabalha bugs que foram reprovados em testes',
    notionFilter: {
      property: 'Status',
      status: { equals: 'Reprovado' }
    },
    generatePrompt: (data) => `# ü§ñ TAREFA AUTOM√ÅTICA - BUGS REPROVADOS

**Status**: PENDENTE  
**Criado em**: ${new Date().toLocaleString('pt-BR')}
**Estrat√©gia**: Retrabalho de Bugs Reprovados

---

## üìã CONTEXTO DO PROJETO

**Projeto**: ${data.projectPath}
${data.githubRepo ? `**Reposit√≥rio**: ${data.githubRepo}` : ''}

## ‚ö†Ô∏è REGRAS OBRIGAT√ìRIAS

1. **USO DO MCP DO NOTION**: Voc√™ DEVE usar EXCLUSIVAMENTE o MCP do Notion para:
   - Buscar bugs reprovados no database
   - Ler coment√°rios que explicam a reprova√ß√£o
   - Atualizar status dos bugs
   - Adicionar coment√°rios sobre o retrabalho
   - Caso n√£o consiga extrair TODO o conte√∫do, prossiga com o dispon√≠vel

2. **ARQUITETURA DO PROJETO**: Antes de retrabalhar:
   - Consulte a pasta \`Docs\` dentro de \`${data.projectPath}\`
   - Leia os arquivos de arquitetura, padr√µes e conven√ß√µes
   - Siga ESTRITAMENTE a arquitetura exemplificada nos Docs
   - Compare sua implementa√ß√£o anterior com os padr√µes

---

## üéØ MISS√ÉO: RETRABALHAR BUGS REPROVADOS

Bugs reprovados requerem aten√ß√£o especial! Voc√™ deve analisar o MOTIVO da reprova√ß√£o e corrigir adequadamente.

### PASSO 1: Buscar Bugs Reprovados no Notion

**OBRIGAT√ìRIO**: Use o MCP do Notion para buscar todos os bugs com status **"Reprovado"**:

\`\`\`
Database URL: ${data.notionDatabaseUrl}
Filtro: Status = "Reprovado"
\`\`\`

**Comandos MCP que voc√™ DEVE executar:**
- \`mcp_Notion_notion-fetch\` com o ID/URL do database
- \`mcp_Notion_notion-search\` para buscar por Status = "Reprovado"
- \`mcp_Notion_notion-get-comments\` para ler TODOS os coment√°rios
- **CR√çTICO**: LEIA TODOS OS COMENT√ÅRIOS para entender o motivo da reprova√ß√£o!

### PASSO 2: Para Cada Bug Reprovado

#### 2.1. An√°lise da Reprova√ß√£o
- **Leia TODOS os coment√°rios** no Notion
- Identifique o **motivo exato da reprova√ß√£o**
- Entenda o que **n√£o funcionou** na tentativa anterior
- Verifique se h√° **requisitos adicionais** mencionados
- Analise se a corre√ß√£o anterior foi na **dire√ß√£o certa**

#### 2.2. Consultar Arquitetura do Projeto
**OBRIGAT√ìRIO ANTES DO RETRABALHO:**
- Navegue at√© \`${data.projectPath}/Docs\`
- Leia os arquivos de documenta√ß√£o
- Compare a implementa√ß√£o anterior com os padr√µes dos Docs
- Identifique se a reprova√ß√£o foi por n√£o seguir os padr√µes
- Anote os padr√µes corretos que voc√™ deve seguir

#### 2.3. An√°lise do C√≥digo Atual
- Navegue at√©: \`${data.projectPath}\`
- Encontre a corre√ß√£o anterior (se commitada)
- Analise o que foi feito anteriormente
- Compare com os padr√µes dos Docs
- Identifique o que precisa ser **corrigido ou melhorado**

#### 2.4. Atualizar Status
- Use MCP do Notion (\`mcp_Notion_notion-update-page\`)
- Altere status de "Reprovado" ‚Üí "Em Retrabalho"
- Use \`mcp_Notion_notion-create-comment\`: "üîÑ Iniciando retrabalho baseado no feedback de teste"

#### 2.5. Implementa√ß√£o da Corre√ß√£o Revisada
- **Corrija o problema** identificado na reprova√ß√£o
- **N√ÉO ignore** o feedback dos testadores
- **Siga RIGOROSAMENTE** os padr√µes documentados nos Docs
- Se a abordagem anterior estava errada, **mude a estrat√©gia**
- Se n√£o seguiu os Docs antes, **corrija para seguir agora**
- Teste mais cen√°rios e edge cases
- Documente as mudan√ßas feitas em rela√ß√£o √† vers√£o anterior

#### 2.6. Valida√ß√£o Rigorosa
- Execute TODOS os testes dispon√≠veis
- Teste os cen√°rios que causaram a reprova√ß√£o
- Teste cen√°rios similares e edge cases
- Verifique se n√£o quebrou nada
- Valide que agora seguiu os padr√µes dos Docs

${data.autoCommit !== false ? `
#### 2.7. Commit no GitHub
- Use a mesma branch da corre√ß√£o anterior OU crie nova: \`fix/[nome-do-bug]-v2\`
- Fa√ßa commit com mensagem clara:
  * Formato: \`fix: [nome do bug] - retrabalho ap√≥s reprova√ß√£o\`
  * Body: 
    - O que foi reprovado e por qu√™
    - O que foi corrigido nesta vers√£o
    - Padr√µes dos Docs que foram seguidos
    - Testes adicionais realizados
- Push para o reposit√≥rio
` : ''}

#### 2.8. Atualiza√ß√£o no Notion
**OBRIGAT√ìRIO**: Use o MCP do Notion:
- \`mcp_Notion_notion-update-page\` para alterar status ‚Üí **"Pronto para Teste"**
- \`mcp_Notion_notion-create-comment\` com coment√°rio DETALHADO:
  * üìù Resumo do motivo da reprova√ß√£o
  * ‚úÖ O que foi corrigido nesta vers√£o
  * üìê Padr√µes dos Docs que foram seguidos corretamente
  * üîç Testes adicionais realizados
  * ‚ö†Ô∏è Pontos espec√≠ficos para validar no teste
  ${data.autoCommit !== false ? '* üîó Branch e hash do commit' : ''}

### PASSO 3: Relat√≥rio Final

Crie um arquivo em \`results/relatorio-reprovados-${Date.now()}.md\` com an√°lise detalhada de cada bug retrabalhado.

---

## ‚ö†Ô∏è REGRAS ESPECIAIS PARA BUGS REPROVADOS

1. **MCP DO NOTION √â OBRIGAT√ìRIO**: Use SEMPRE \`mcp_Notion_notion-get-comments\` para ler coment√°rios
2. **DOCS DO PROJETO S√ÉO LEI**: Verifique se a reprova√ß√£o foi por n√£o seguir os Docs
3. **SEMPRE** leia TODO o hist√≥rico de coment√°rios via MCP
4. **NUNCA** ignore o feedback dos testadores
5. **SEMPRE** entenda o MOTIVO da reprova√ß√£o antes de corrigir
6. **SEMPRE** consulte os Docs e compare com implementa√ß√£o anterior
7. **SE** a abordagem anterior estava errada, mude completamente a estrat√©gia
8. **SE** n√£o seguiu os Docs antes, corrija para seguir agora
9. **SEMPRE** teste os cen√°rios espec√≠ficos que causaram a reprova√ß√£o
10. **DOCUMENTE** claramente o que mudou em rela√ß√£o √† vers√£o anterior
11. **SE** n√£o conseguir extrair todo conte√∫do do card:
    - Prossiga com o que conseguiu obter
    - Continue com o retrabalho

---

## üöÄ EXECUTE AGORA

Bugs reprovados s√£o prioridade! Execute com aten√ß√£o extra aos detalhes.

**LEMBRETES FINAIS**:
- ‚úÖ Use MCP do Notion para ler coment√°rios da reprova√ß√£o
- ‚úÖ Consulte ${data.projectPath}/Docs antes de retrabalhar
- ‚úÖ Compare implementa√ß√£o anterior com padr√µes dos Docs
- ‚úÖ Se n√£o conseguir extrair todo conte√∫do, prossiga com o dispon√≠vel

**Foco**: Entender o motivo da reprova√ß√£o e corrigir adequadamente seguindo os Docs!

Boa sorte! üéØ
`
  },

  // ========================================================================
  // Bugs Em Andamento
  // ========================================================================
  'em-andamento': {
    name: 'Bugs Em Andamento',
    description: 'Continua bugs que j√° foram iniciados',
    notionFilter: {
      property: 'Status',
      status: { equals: 'Em Andamento' }
    },
    generatePrompt: (data) => `# ü§ñ TAREFA AUTOM√ÅTICA - BUGS EM ANDAMENTO

**Status**: PENDENTE  
**Criado em**: ${new Date().toLocaleString('pt-BR')}
**Estrat√©gia**: Continua√ß√£o de Bugs Em Andamento

---

## üìã CONTEXTO DO PROJETO

**Projeto**: ${data.projectPath}
${data.githubRepo ? `**Reposit√≥rio**: ${data.githubRepo}` : ''}

## ‚ö†Ô∏è REGRAS OBRIGAT√ìRIAS

1. **USO DO MCP DO NOTION**: Use EXCLUSIVAMENTE o MCP do Notion para interagir com o database
2. **ARQUITETURA DO PROJETO**: Consulte \`${data.projectPath}/Docs\` antes de continuar a implementa√ß√£o
3. **Se n√£o conseguir extrair todo conte√∫do do card**, prossiga com o dispon√≠vel

---

## üéØ MISS√ÉO: CONTINUAR BUGS EM ANDAMENTO

Estes bugs j√° foram iniciados. Voc√™ deve analisar o progresso atual e finalizar a implementa√ß√£o.

### PASSO 1: Buscar Bugs Em Andamento

**OBRIGAT√ìRIO**: Use MCP do Notion:

\`\`\`
Database URL: ${data.notionDatabaseUrl}
Filtro: Status = "Em Andamento"
\`\`\`

**Comandos MCP:**
- \`mcp_Notion_notion-fetch\` com o ID/URL do database
- \`mcp_Notion_notion-search\` para Status = "Em Andamento"
- \`mcp_Notion_notion-get-comments\` para ler progresso

### PASSO 2: Para Cada Bug

#### 2.1. An√°lise do Progresso Atual
- Use MCP para ler TODOS os coment√°rios sobre o que j√° foi feito
- Verifique se h√° commits relacionados
- Identifique em que ponto o trabalho parou
- Determine o que falta ser feito

#### 2.2. Consultar Arquitetura
- Navegue at√© \`${data.projectPath}/Docs\`
- Verifique se o trabalho iniciado est√° seguindo os padr√µes
- Se n√£o estiver, ajuste para seguir os Docs

#### 2.3. Continua√ß√£o do Trabalho
- Complete a implementa√ß√£o iniciada seguindo os Docs
- Se encontrar problemas na abordagem atual, corrija
- Finalize todos os arquivos que precisam ser alterados

#### 2.4. Finaliza√ß√£o
- Valide a corre√ß√£o completa
${data.autoCommit !== false ? '- Fa√ßa commit das altera√ß√µes finais\n' : ''}
- Use MCP (\`mcp_Notion_notion-update-page\`) para status ‚Üí "Pronto para Teste"
- Use MCP (\`mcp_Notion_notion-create-comment\`) com resumo da finaliza√ß√£o

### PASSO 3: Relat√≥rio

Crie relat√≥rio em \`results/relatorio-em-andamento-${Date.now()}.md\`

---

## üöÄ EXECUTE AGORA

**LEMBRETES**:
- ‚úÖ Use MCP do Notion para tudo relacionado ao Notion
- ‚úÖ Consulte ${data.projectPath}/Docs antes de continuar
- ‚úÖ Se n√£o conseguir extrair todo conte√∫do, prossiga com o dispon√≠vel

**Foco**: Finalizar bugs que j√° foram iniciados seguindo os Docs!

Boa sorte! üéØ
`
  },

  // ========================================================================
  // Alta Prioridade
  // ========================================================================
  'prioridade-alta': {
    name: 'Alta Prioridade',
    description: 'Foca apenas em bugs cr√≠ticos e urgentes',
    notionFilter: {
      or: [
        { property: 'Prioridade', select: { equals: 'Cr√≠tica' } },
        { property: 'Prioridade', select: { equals: 'Alta' } }
      ]
    },
    generatePrompt: (data) => `# ü§ñ TAREFA AUTOM√ÅTICA - BUGS DE ALTA PRIORIDADE

**Status**: PENDENTE - URGENTE üî•  
**Criado em**: ${new Date().toLocaleString('pt-BR')}
**Estrat√©gia**: Alta Prioridade (Cr√≠tico + Alto)

---

## üìã CONTEXTO DO PROJETO

**Projeto**: ${data.projectPath}
${data.githubRepo ? `**Reposit√≥rio**: ${data.githubRepo}` : ''}

## ‚ö†Ô∏è REGRAS OBRIGAT√ìRIAS - PRIORIDADE M√ÅXIMA

1. **USO DO MCP DO NOTION**: Use EXCLUSIVAMENTE o MCP do Notion
2. **ARQUITETURA DO PROJETO**: Consulte \`${data.projectPath}/Docs\` ANTES de qualquer altera√ß√£o cr√≠tica
3. **Se n√£o conseguir extrair todo conte√∫do**, prossiga - URG√äNCIA √© prioridade
4. **QUALIDADE N√ÉO PODE SER COMPROMETIDA**: Mesmo com urg√™ncia, siga os Docs

---

## üéØ MISS√ÉO CR√çTICA: RESOLVER BUGS DE ALTA PRIORIDADE

‚ö†Ô∏è **ATEN√á√ÉO**: Estes s√£o bugs CR√çTICOS ou de ALTA PRIORIDADE. Eles afetam funcionalidades importantes e devem ser resolvidos com m√°xima aten√ß√£o!

### PASSO 1: Buscar Bugs Priorit√°rios

**OBRIGAT√ìRIO**: Use MCP do Notion:

\`\`\`
Database URL: ${data.notionDatabaseUrl}
Filtro: Prioridade = "Cr√≠tica" OU Prioridade = "Alta"
Status: N√ÉO "Conclu√≠do"
\`\`\`

**Comandos MCP:**
- \`mcp_Notion_notion-fetch\` e \`mcp_Notion_notion-search\`
- Busque bugs Cr√≠ticos e Altos n√£o conclu√≠dos

### PASSO 2: Prioriza√ß√£o Extrema

Ordene por criticidade:
1. üî•üî•üî• **Cr√≠ticos** - Resolvam PRIMEIRO
2. üî• **Altos** - Depois dos cr√≠ticos

### PASSO 3: Resolu√ß√£o Priorit√°ria

Para cada bug:

#### 3.1. An√°lise de Impacto
- Entenda o IMPACTO do bug via coment√°rios MCP
- Identifique usu√°rios/funcionalidades afetadas
- Avalie se h√° workarounds tempor√°rios

#### 3.2. Consultar Arquitetura (R√°pido mas Obrigat√≥rio)
- Navegue at√© \`${data.projectPath}/Docs\`
- Leia rapidamente os padr√µes cr√≠ticos
- Mesmo com urg√™ncia, SIGA os Docs

#### 3.3. Resolu√ß√£o Focada
- Foque na SOLU√á√ÉO EFETIVA seguindo os Docs
- Priorize estabilidade E conformidade com padr√µes
- Corrija o problema de forma robusta

#### 3.4. Valida√ß√£o Rigorosa
- Teste exaustivamente
- Verifique edge cases
- Garanta que est√° realmente resolvido

${data.autoCommit !== false ? `
#### 3.5. Deploy R√°pido
- Commit imediato ap√≥s valida√ß√£o
- Branch: \`hotfix/[nome-bug]\` para cr√≠ticos
- Mensagem: \`fix(critical): [descri√ß√£o]\`
` : ''}

#### 3.6. Comunica√ß√£o
- Use MCP (\`mcp_Notion_notion-update-page\`) para status ‚Üí "Pronto para Teste"
- Use MCP (\`mcp_Notion_notion-create-comment\`) marcando urg√™ncia
- Destaque o que foi corrigido e padr√µes seguidos

### PASSO 4: Relat√≥rio de Urg√™ncia

Crie arquivo em \`results/relatorio-prioridade-${Date.now()}.md\` com:
- Lista de bugs cr√≠ticos resolvidos
- Impacto de cada corre√ß√£o
- Recomenda√ß√µes para teste urgente

---

## ‚ö†Ô∏è REGRAS PARA BUGS PRIORIT√ÅRIOS

1. **MCP DO NOTION**: Use sempre para atualizar status em tempo real
2. **DOCS MESMO COM URG√äNCIA**: Consulte os Docs rapidamente mas SEMPRE
3. **FOCO TOTAL** - Estes bugs v√™m primeiro
4. **QUALIDADE** - N√£o comprometa qualidade nem padr√µes dos Docs
5. **TESTE BEM** - Bugs cr√≠ticos mal corrigidos causam mais problemas
6. **COMUNIQUE** - Mantenha Notion atualizado via MCP em tempo real
7. **SE BLOQUEAR** - Comunique via MCP imediatamente com detalhes
8. **SE** n√£o conseguir extrair todo conte√∫do: prossiga com urg√™ncia

---

## üöÄ EXECUTE COM URG√äNCIA

**LEMBRETES URGENTES**:
- ‚úÖ Use MCP do Notion para atualiza√ß√µes em tempo real
- ‚úÖ Consulte ${data.projectPath}/Docs mesmo com urg√™ncia
- ‚úÖ Urg√™ncia N√ÉO justifica ignorar padr√µes
- ‚úÖ Se n√£o conseguir todo conte√∫do do card, prossiga

**Prioridade M√ÅXIMA**: Bugs cr√≠ticos e altos precisam de resolu√ß√£o IMEDIATA mas CORRETA!

Boa sorte! üéØüî•
`
  },

  // ========================================================================
  // Todos os Pendentes
  // ========================================================================
  'todos-pendentes': {
    name: 'Todos os Pendentes',
    description: 'Resolve todos os bugs n√£o conclu√≠dos',
    notionFilter: {
      property: 'Status',
      status: { does_not_equal: 'Conclu√≠do' }
    },
    generatePrompt: (data) => `# ü§ñ TAREFA AUTOM√ÅTICA - TODOS OS BUGS PENDENTES

**Status**: PENDENTE  
**Criado em**: ${new Date().toLocaleString('pt-BR')}
**Estrat√©gia**: Varredura Completa (Todos os Pendentes)

---

## üìã CONTEXTO DO PROJETO

**Projeto**: ${data.projectPath}
${data.githubRepo ? `**Reposit√≥rio**: ${data.githubRepo}` : ''}

## ‚ö†Ô∏è REGRAS OBRIGAT√ìRIAS

1. **USO DO MCP DO NOTION**: Use EXCLUSIVAMENTE o MCP do Notion para TODAS as intera√ß√µes
2. **ARQUITETURA DO PROJETO**: Consulte \`${data.projectPath}/Docs\` para CADA bug antes de implementar
3. **Se n√£o conseguir extrair todo conte√∫do do card**, prossiga com o dispon√≠vel - este √© um processo extenso

---

## üéØ MISS√ÉO: LIMPAR BACKLOG COMPLETO

Voc√™ ir√° processar TODOS os bugs que n√£o est√£o com status "Conclu√≠do".

### PASSO 1: Buscar Todos os Bugs Pendentes

**OBRIGAT√ìRIO**: Use MCP do Notion:

\`\`\`
Database URL: ${data.notionDatabaseUrl}
Filtro: Status ‚â† "Conclu√≠do"
\`\`\`

**Comandos MCP:**
- \`mcp_Notion_notion-fetch\` e \`mcp_Notion_notion-search\`
- Busque TODOS os bugs n√£o conclu√≠dos

### PASSO 2: Organiza√ß√£o Inteligente

Organize os bugs por:
1. **Prioridade** (Cr√≠tica ‚Üí Alta ‚Üí M√©dia ‚Üí Baixa)
2. **Status** (Reprovado ‚Üí Em Andamento ‚Üí N√£o Iniciado)
3. **Tipo** (agrupe bugs similares)

### PASSO 3: Consultar Arquitetura ANTES de Iniciar

**CR√çTICO**: Antes de processar qualquer bug:
- Navegue at√© \`${data.projectPath}/Docs\`
- Leia TODA a documenta√ß√£o de arquitetura
- Entenda os padr√µes que voc√™ deve seguir
- Esta √© uma varredura completa - consist√™ncia √© fundamental

### PASSO 4: Execu√ß√£o em Lote

#### 4.1. Fase 1: Cr√≠ticos e Reprovados
- Resolva primeiro os cr√≠ticos (seguindo Docs)
- Depois retrabalhe os reprovados (compare com Docs)
- Use MCP para atualizar status de cada um

#### 4.2. Fase 2: Em Andamento e Alta Prioridade
- Finalize os que j√° foram iniciados (valide com Docs)
- Resolva os de alta prioridade restantes (seguindo Docs)
- Use MCP para todos os updates

#### 4.3. Fase 3: Novos e M√©dia/Baixa Prioridade
- Ataque os n√£o iniciados (sempre consultando Docs)
- Priorize os de m√©dia prioridade
- Por √∫ltimo, os de baixa
- MCP para cada atualiza√ß√£o

#### 4.4. Processamento Cont√≠nuo
- N√£o pare at√© processar todos (ou encontrar bloqueios)
- Use MCP (\`mcp_Notion_notion-update-page\`) ap√≥s cada bug
- Use MCP (\`mcp_Notion_notion-create-comment\`) para documentar progresso
- Mantenha relat√≥rio atualizado

### PASSO 5: Relat√≥rio Completo

Crie arquivo detalhado em \`results/relatorio-completo-${Date.now()}.md\`:

\`\`\`markdown
# üìä Relat√≥rio Completo - Varredura Total

## üìà Estat√≠sticas Gerais
- Total de bugs encontrados: [X]
- Bugs resolvidos: [X]
- Bugs com bloqueio: [X]
- Taxa de sucesso: [X%]

## Por Prioridade
- Cr√≠ticos: [X/X resolvidos]
- Altos: [X/X resolvidos]  
- M√©dios: [X/X resolvidos]
- Baixos: [X/X resolvidos]

## Por Status Original
- Reprovados: [X/X retrabalhados]
- Em Andamento: [X/X finalizados]
- N√£o Iniciados: [X/X resolvidos]

## Tempo de Processamento
- In√≠cio: [timestamp]
- Fim: [timestamp]
- Dura√ß√£o: [tempo]

## Arquivos Impactados
[Lista de todos os arquivos alterados]

${data.autoCommit !== false ? `
## Commits Realizados
[Lista de todos os commits com links]
` : ''}

## Bugs Bloqueados
[Detalhamento de bugs que n√£o puderam ser resolvidos]

## Recomenda√ß√µes
[Sugest√µes para melhorias futuras]
\`\`\`

---

## ‚ö†Ô∏è REGRAS PARA VARREDURA COMPLETA

1. **MCP DO NOTION SEMPRE**: Use MCP para TODAS as intera√ß√µes com Notion
2. **DOCS S√ÉO FUNDAMENTAIS**: Consulte os Docs ANTES de cada bug para manter consist√™ncia
3. **SEJA SISTEM√ÅTICO** - Processe de forma organizada seguindo os Docs
4. **N√ÉO PARE** - Continue at√© processar todos ou ter bloqueios claros
5. **MANTENHA QUALIDADE E PADR√ïES** - Quantidade n√£o pode comprometer qualidade nem padr√µes dos Docs
6. **DOCUMENTE BEM** - Relat√≥rio completo √© essencial
7. **ATUALIZE NOTION VIA MCP** - Use MCP para manter status sempre sincronizado
8. **SE** n√£o conseguir extrair todo conte√∫do: prossiga - esta √© uma varredura longa

---

## üöÄ EXECUTE A VARREDURA COMPLETA

Esta √© a estrat√©gia mais abrangente. Prepare-se para um trabalho extenso!

**LEMBRETES PARA VARREDURA**:
- ‚úÖ Use MCP do Notion para TODAS as intera√ß√µes
- ‚úÖ Leia ${data.projectPath}/Docs ANTES de processar bugs
- ‚úÖ Mantenha consist√™ncia nos padr√µes em TODOS os bugs
- ‚úÖ Se n√£o conseguir todo conte√∫do do card, prossiga
- ‚úÖ Quantidade n√£o justifica comprometer padr√µes

**Objetivo**: Limpar o m√°ximo poss√≠vel do backlog mantendo qualidade e padr√µes!

Boa sorte! üéØüìã
`
  },

  // ========================================================================
  // Personalizado
  // ========================================================================
  'custom': {
    name: 'Personalizado',
    description: 'Permite definir filtros customizados',
    generatePrompt: (data) => `# ü§ñ TAREFA AUTOM√ÅTICA - FILTRO PERSONALIZADO

**Status**: PENDENTE  
**Criado em**: ${new Date().toLocaleString('pt-BR')}
**Estrat√©gia**: Personalizada

---

## üìã CONTEXTO DO PROJETO

**Projeto**: ${data.projectPath}
${data.githubRepo ? `**Reposit√≥rio**: ${data.githubRepo}` : ''}

## ‚ö†Ô∏è REGRAS OBRIGAT√ìRIAS

1. **USO DO MCP DO NOTION**: Use EXCLUSIVAMENTE o MCP do Notion para todas as intera√ß√µes
2. **ARQUITETURA DO PROJETO**: Consulte \`${data.projectPath}/Docs\` antes de qualquer implementa√ß√£o
3. **Se n√£o conseguir extrair todo conte√∫do do card**, prossiga com o dispon√≠vel

---

## üéØ MISS√ÉO: RESOLVER BUGS COM FILTRO PERSONALIZADO

### PASSO 1: Buscar Bugs com Filtro Personalizado

**OBRIGAT√ìRIO**: Use MCP do Notion:

\`\`\`
Database URL: ${data.notionDatabaseUrl}
Filtro Customizado: ${data.customFilter || 'Nenhum filtro especificado'}
\`\`\`

**Comandos MCP:**
- \`mcp_Notion_notion-fetch\` com o ID/URL do database
- \`mcp_Notion_notion-search\` aplicando o filtro customizado
- Extraia todos os dados relevantes dos bugs encontrados

### PASSO 2: Consultar Arquitetura

**ANTES de processar os bugs**:
- Navegue at√© \`${data.projectPath}/Docs\`
- Leia a documenta√ß√£o de arquitetura e padr√µes
- Anote os padr√µes que voc√™ deve seguir

### PASSO 3: Processamento

Processe os bugs encontrados seguindo o fluxo padr√£o:
1. An√°lise (via MCP do Notion para ler detalhes)
2. Consulta aos Docs do projeto
3. Implementa√ß√£o (seguindo padr√µes dos Docs)
4. Valida√ß√£o
${data.autoCommit !== false ? '5. Commit\n6' : '5'}. Atualiza√ß√£o no Notion (via MCP: \`mcp_Notion_notion-update-page\` e \`mcp_Notion_notion-create-comment\`)

### PASSO 4: Relat√≥rio

Crie relat√≥rio em \`results/relatorio-custom-${Date.now()}.md\`

---

## üöÄ EXECUTE AGORA

**LEMBRETES**:
- ‚úÖ Use MCP do Notion para TODAS as intera√ß√µes
- ‚úÖ Consulte ${data.projectPath}/Docs antes de implementar
- ‚úÖ Siga a arquitetura exemplificada nos Docs
- ‚úÖ Se n√£o conseguir todo conte√∫do do card, prossiga

Boa sorte! üéØ
`
  }
};

// Fun√ß√£o principal para obter o prompt baseado na estrat√©gia
function getPromptForStrategy(strategy, data) {
  const template = promptTemplates[strategy];
  
  if (!template) {
    throw new Error(`Estrat√©gia desconhecida: ${strategy}`);
  }
  
  return template.generatePrompt(data);
}

// Fun√ß√£o para obter informa√ß√µes sobre uma estrat√©gia
function getStrategyInfo(strategy) {
  const template = promptTemplates[strategy];
  
  if (!template) {
    return null;
  }
  
  return {
    name: template.name,
    description: template.description,
    hasNotionFilter: !!template.notionFilter,
    notionFilter: template.notionFilter
  };
}

// Fun√ß√£o para listar todas as estrat√©gias dispon√≠veis
function listStrategies() {
  return Object.keys(promptTemplates).map(key => ({
    id: key,
    ...getStrategyInfo(key)
  }));
}

module.exports = {
  getPromptForStrategy,
  getStrategyInfo,
  listStrategies,
  promptTemplates
};

