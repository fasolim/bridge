#!/usr/bin/env node

/**
 * Script de Sincroniza√ß√£o Automatizada
 * Integra Notion ‚Üí MongoDB ‚Üí ML Learning
 */

require('dotenv').config();
const NotionToMongoSync = require('./notion-to-mongodb');
const MLLearningEngine = require('./ml-learning');
const { BugMetrics, MLConfig } = require('../models/Metrics');

class AutomatedSync {
  constructor() {
    this.sync = new NotionToMongoSync();
    this.ml = new MLLearningEngine();
    this.isRunning = false;
  }

  async connect() {
    await this.sync.connect();
    await this.ml.connect();
  }

  async disconnect() {
    await this.sync.disconnect();
    await this.ml.disconnect();
  }

  /**
   * Executa sincroniza√ß√£o completa
   */
  async runFullSync(databaseId, options = {}) {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è  Sincroniza√ß√£o j√° em andamento...');
      return;
    }

    this.isRunning = true;
    const startTime = Date.now();

    try {
      console.log('\nüöÄ INICIANDO SINCRONIZA√á√ÉO AUTOMATIZADA\n');
      console.log(`üìÖ Iniciado em: ${new Date().toLocaleString('pt-BR')}\n`);

      // 1. Sincronizar dados do Notion
      console.log('üì• FASE 1: Sincronizando dados do Notion...');
      await this.sync.syncAllBugs(databaseId, options.filter || {});
      
      // 2. Executar aprendizado de m√°quina
      console.log('\nü§ñ FASE 2: Executando aprendizado de m√°quina...');
      const mlResults = await this.ml.runLearningCycle();
      
      // 3. Gerar relat√≥rio de m√©tricas
      console.log('\nüìä FASE 3: Gerando relat√≥rio de m√©tricas...');
      const metrics = await this.generateMetricsReport();
      
      // 4. Aplicar otimiza√ß√µes
      console.log('\n‚ö° FASE 4: Aplicando otimiza√ß√µes...');
      await this.applyOptimizations(mlResults);
      
      const endTime = Date.now();
      const duration = (endTime - startTime) / 1000;
      
      console.log('\n' + '='.repeat(70));
      console.log('üéâ SINCRONIZA√á√ÉO AUTOMATIZADA CONCLU√çDA');
      console.log('='.repeat(70));
      console.log(`‚è±Ô∏è  Dura√ß√£o: ${duration.toFixed(1)} segundos`);
      console.log(`üìä Bugs sincronizados: ${this.sync.syncedCount}`);
      console.log(`üîÑ Bugs atualizados: ${this.sync.updatedCount}`);
      console.log(`‚ùå Erros: ${this.sync.errorCount}`);
      console.log('='.repeat(70) + '\n');
      
      return {
        success: true,
        duration,
        syncStats: {
          synced: this.sync.syncedCount,
          updated: this.sync.updatedCount,
          errors: this.sync.errorCount
        },
        mlResults,
        metrics
      };
      
    } catch (error) {
      console.error('‚ùå Erro durante sincroniza√ß√£o automatizada:', error);
      throw error;
    } finally {
      this.isRunning = false;
    }
  }

  /**
   * Gera relat√≥rio de m√©tricas atual
   */
  async generateMetricsReport() {
    const bugs = await BugMetrics.find({});
    const config = await MLConfig.findOne({ isActive: true });
    
    const report = {
      totalBugs: bugs.length,
      bugsByStatus: {},
      bugsByLevel: {},
      performanceMetrics: {},
      mlMetrics: {}
    };
    
    // Bugs por status
    ['pending', 'in_progress', 'resolved', 'rejected', 'escalated'].forEach(status => {
      report.bugsByStatus[status] = bugs.filter(b => b.status === status).length;
    });
    
    // Bugs por n√≠vel
    for (let level = 1; level <= 5; level++) {
      const levelBugs = bugs.filter(b => b.bugLevel === level);
      report.bugsByLevel[level] = {
        total: levelBugs.length,
        resolved: levelBugs.filter(b => b.status === 'resolved').length,
        successRate: levelBugs.length > 0 ? 
          levelBugs.filter(b => b.status === 'resolved').length / levelBugs.length : 0
      };
    }
    
    // M√©tricas de performance
    const resolvedBugs = bugs.filter(b => b.status === 'resolved');
    if (resolvedBugs.length > 0) {
      report.performanceMetrics = {
        avgAttempts: resolvedBugs.reduce((sum, b) => sum + b.totalAttempts, 0) / resolvedBugs.length,
        avgExecutionTime: resolvedBugs.reduce((sum, b) => sum + b.totalExecutionTime, 0) / resolvedBugs.length,
        avgTokens: resolvedBugs.reduce((sum, b) => sum + b.totalTokens, 0) / resolvedBugs.length,
        avgCost: resolvedBugs.reduce((sum, b) => sum + b.totalCost, 0) / resolvedBugs.length,
        totalCost: bugs.reduce((sum, b) => sum + b.totalCost, 0),
        totalTokens: bugs.reduce((sum, b) => sum + b.totalTokens, 0)
      };
    }
    
    // M√©tricas de ML
    if (config) {
      report.mlMetrics = {
        promptTemplates: config.promptTemplates.map(t => ({
          level: t.level,
          successRate: t.successRate,
          usageCount: t.usageCount
        })),
        escalationRules: config.escalationRules.length,
        lastUpdated: config.lastUpdated
      };
    }
    
    console.log('üìà Relat√≥rio de m√©tricas gerado:');
    console.log(`   Total de bugs: ${report.totalBugs}`);
    console.log(`   Bugs resolvidos: ${report.bugsByStatus.resolved}`);
    console.log(`   Taxa de sucesso geral: ${((report.bugsByStatus.resolved / report.totalBugs) * 100).toFixed(1)}%`);
    console.log(`   Custo total: $${report.performanceMetrics.totalCost?.toFixed(4) || 0}`);
    
    return report;
  }

  /**
   * Aplica otimiza√ß√µes baseadas no aprendizado
   */
  async applyOptimizations(mlResults) {
    console.log('‚ö° Aplicando otimiza√ß√µes...');
    
    const config = await MLConfig.findOne({ isActive: true });
    if (!config) {
      console.log('‚ö†Ô∏è  Configura√ß√£o de ML n√£o encontrada');
      return;
    }
    
    // Otimizar regras de escala√ß√£o baseadas nos resultados
    const { escalation } = mlResults;
    if (escalation && escalation.escalationStats) {
      const newRules = [...config.escalationRules];
      
      // Adicionar regras baseadas em dados reais
      Object.entries(escalation.escalationStats).forEach(([level, stats]) => {
        if (stats.successRate > 0.7 && stats.total > 5) {
          const ruleExists = newRules.some(rule => 
            rule.condition.includes(`level_${level}`)
          );
          
          if (!ruleExists) {
            newRules.push({
              condition: `level_${level}_high_success`,
              action: 'auto_escalate',
              parameters: { 
                level: parseInt(level),
                minSuccessRate: 0.7,
                minSamples: 5
              }
            });
          }
        }
      });
      
      config.escalationRules = newRules;
      await config.save();
      
      console.log(`‚úÖ ${newRules.length} regras de escala√ß√£o ativas`);
    }
    
    // Otimizar learning rate baseado na estabilidade dos dados
    const { patterns } = mlResults;
    if (patterns) {
      const totalBugs = Object.values(patterns).reduce((sum, p) => sum + p.totalBugs, 0);
      
      if (totalBugs > 100) {
        // Dados est√°veis, reduzir learning rate
        config.learningRate = Math.max(0.05, config.learningRate * 0.9);
        console.log(`üìâ Learning rate reduzido para ${config.learningRate.toFixed(3)} (dados est√°veis)`);
      } else if (totalBugs < 50) {
        // Poucos dados, aumentar learning rate
        config.learningRate = Math.min(0.2, config.learningRate * 1.1);
        console.log(`üìà Learning rate aumentado para ${config.learningRate.toFixed(3)} (poucos dados)`);
      }
      
      await config.save();
    }
    
    console.log('‚úÖ Otimiza√ß√µes aplicadas');
  }

  /**
   * Monitora mudan√ßas em tempo real (para uso futuro)
   */
  async startMonitoring(databaseId, intervalMinutes = 30) {
    console.log(`üîÑ Iniciando monitoramento (intervalo: ${intervalMinutes} min)`);
    
    const interval = setInterval(async () => {
      try {
        console.log(`\n‚è∞ Executando sincroniza√ß√£o agendada...`);
        await this.runFullSync(databaseId);
      } catch (error) {
        console.error('‚ùå Erro na sincroniza√ß√£o agendada:', error);
      }
    }, intervalMinutes * 60 * 1000);
    
    // Graceful shutdown
    process.on('SIGINT', () => {
      console.log('\nüõë Parando monitoramento...');
      clearInterval(interval);
      this.disconnect().then(() => process.exit(0));
    });
    
    return interval;
  }

  /**
   * Executa an√°lise de tend√™ncias
   */
  async analyzeTrends(days = 30) {
    console.log(`üìà Analisando tend√™ncias dos √∫ltimos ${days} dias...`);
    
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - days);
    
    const recentBugs = await BugMetrics.find({
      createdAt: { $gte: startDate }
    });
    
    const trends = {
      period: { start: startDate, end: new Date(), days },
      totalBugs: recentBugs.length,
      resolutionRate: 0,
      avgResolutionTime: 0,
      costTrend: 0,
      levelDistribution: {},
      topTechnologies: []
    };
    
    if (recentBugs.length > 0) {
      const resolvedBugs = recentBugs.filter(b => b.status === 'resolved');
      trends.resolutionRate = resolvedBugs.length / recentBugs.length;
      
      if (resolvedBugs.length > 0) {
        trends.avgResolutionTime = resolvedBugs.reduce((sum, b) => {
          const resolutionTime = b.resolvedAt ? 
            (b.resolvedAt - b.createdAt) / (1000 * 60 * 60) : 0; // em horas
          return sum + resolutionTime;
        }, 0) / resolvedBugs.length;
      }
      
      // Distribui√ß√£o por n√≠vel
      for (let level = 1; level <= 5; level++) {
        trends.levelDistribution[level] = recentBugs.filter(b => b.bugLevel === level).length;
      }
      
      // Tecnologias mais comuns
      const allTechnologies = recentBugs.flatMap(b => 
        b.mlData?.features?.technologyStack || []
      );
      const techCount = {};
      allTechnologies.forEach(tech => {
        techCount[tech] = (techCount[tech] || 0) + 1;
      });
      
      trends.topTechnologies = Object.entries(techCount)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 5)
        .map(([tech, count]) => ({ technology: tech, count }));
    }
    
    console.log('üìä Tend√™ncias identificadas:');
    console.log(`   Taxa de resolu√ß√£o: ${(trends.resolutionRate * 100).toFixed(1)}%`);
    console.log(`   Tempo m√©dio de resolu√ß√£o: ${trends.avgResolutionTime.toFixed(1)} horas`);
    console.log(`   Tecnologias mais comuns: ${trends.topTechnologies.map(t => t.technology).join(', ')}`);
    
    return trends;
  }
}

// Fun√ß√£o principal
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];
  const databaseId = args[1];
  
  if (!command || !databaseId) {
    console.log('‚ùå Uso: node automated-sync.js <command> <database_id> [options]');
    console.log('');
    console.log('Comandos dispon√≠veis:');
    console.log('  sync        - Executa sincroniza√ß√£o completa');
    console.log('  monitor     - Inicia monitoramento cont√≠nuo');
    console.log('  trends      - Analisa tend√™ncias');
    console.log('  ml-only     - Executa apenas aprendizado de m√°quina');
    console.log('');
    console.log('Exemplos:');
    console.log('  node automated-sync.js sync abc123def456');
    console.log('  node automated-sync.js monitor abc123def456 60');
    console.log('  node automated-sync.js trends abc123def456 30');
    process.exit(1);
  }
  
  const sync = new AutomatedSync();
  
  try {
    await sync.connect();
    
    switch (command) {
      case 'sync':
        await sync.runFullSync(databaseId);
        break;
        
      case 'monitor':
        const interval = parseInt(args[2]) || 30;
        await sync.startMonitoring(databaseId, interval);
        break;
        
      case 'trends':
        const days = parseInt(args[2]) || 30;
        await sync.analyzeTrends(days);
        break;
        
      case 'ml-only':
        await sync.ml.runLearningCycle();
        break;
        
      default:
        console.log(`‚ùå Comando desconhecido: ${command}`);
        process.exit(1);
    }
    
  } catch (error) {
    console.error('‚ùå Erro fatal:', error);
    process.exit(1);
  } finally {
    if (command !== 'monitor') {
      await sync.disconnect();
    }
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = AutomatedSync;
